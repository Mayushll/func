{-
  TASK 1 - Find branch of the cell tree
  Write the method that will find a branch of the tree by comparing its
  hash with the hash received in the first parameter. When the algorithm finds
  the subtree (brnch) hose hash equals the received hash, the root cell of
  this branch should be returned. Return empty cell if the branch is not found.
-}
forall X -> int is_null (X x) asm "ISNULL";
forall X -> (tuple, ()) push_back (tuple tail, X head) asm "CONS";
forall X -> (tuple, (X)) pop_back (tuple t) asm "UNCONS";
int cell_hash(cell c) asm "HASHCU";
int slice_refs(slice s) asm "SREFS";
builder begin_cell() asm "NEWC";
cell end_cell(builder b) asm "ENDC";
(slice, cell) load_ref(slice s) asm( -> 1 0) "LDREF";
slice begin_parse(cell c) asm "CTOS";

() recv_internal() {

}

;; testable
(cell) find_branch_by_hash(int hash, cell tree) method_id {
  tuple stack = null();
  stack~push_back(tree);
  cell x = begin_cell().end_cell();
  while (~ stack.is_null()) {
    cell c = stack~pop_back();
    slice s = c.begin_parse();
    int h = cell_hash(c);
    if(h == hash){
        return c;
    }
    cell x = c;
    repeat (s.slice_refs()) {
      stack~push_back(s~load_ref());
    }
  }
  return begin_cell().end_cell();
}
